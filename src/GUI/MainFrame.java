/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Controllers.CustomerController;
import Controllers.ItemController;
import Controllers.ReportController;
import Models.Customer;
import Models.Item;
import Models.Report;
import Tools.MyTableModel;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Michail Sitmalidis
 */
public class MainFrame extends javax.swing.JFrame {
    
    CustomerController customerController;
    ItemController itemController;
    ReportController reportController;
    
    JTableHeader receivingItemsTableHeader;
    DefaultTableModel receivingItemsTableModel;
    JTextField receivingDatePickerTextField;
    Color focusInColor;
    Color focusOutColor;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        myInitialization();

        /*  Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize.width, screenSize.height-35);
         */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        RootPanel = new javax.swing.JPanel();
        customerCardsTabbedPane = new javax.swing.JTabbedPane();
        customerCardTab = new javax.swing.JPanel();
        calculationDisplayPanel = new javax.swing.JPanel();
        subTotalLabel = new javax.swing.JLabel();
        subTotalSum = new javax.swing.JLabel();
        fpaLabel = new javax.swing.JLabel();
        fpaSum = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        totalSum = new javax.swing.JLabel();
        processButton = new javax.swing.JButton();
        customerCardPanel = new javax.swing.JPanel();
        newReceivingTab = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        receivingDatePicker = new com.toedter.calendar.JDateChooser();
        receivingReportNumberField = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addItemButton = new javax.swing.JButton();
        saveReceivingReportButton = new javax.swing.JButton();
        receivingItemsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        receivingItemsTable = new javax.swing.JTable();
        customerArchiveTab = new javax.swing.JPanel();
        HeadPanel = new javax.swing.JPanel();
        AdressPanel2 = new javax.swing.JPanel();
        alternativeStreetLabel = new javax.swing.JLabel();
        alternativeStreetField = new javax.swing.JTextField();
        alternativeDistrictLabel = new javax.swing.JLabel();
        alternativeDistrictField = new javax.swing.JTextField();
        alternativeBellNameLabel = new javax.swing.JLabel();
        alternativeFloorField = new javax.swing.JTextField();
        AlternativePostalCode_Label = new javax.swing.JLabel();
        alternativeFloorLabel = new javax.swing.JLabel();
        alternativeBellNameField = new javax.swing.JTextField();
        alternativeAddressLabel = new javax.swing.JLabel();
        alternativePostalCodeField = new javax.swing.JFormattedTextField();
        AddressPanel1 = new javax.swing.JPanel();
        streetLabel = new javax.swing.JLabel();
        streetField = new javax.swing.JTextField();
        districtLabel = new javax.swing.JLabel();
        districtField = new javax.swing.JTextField();
        bellNameLabel = new javax.swing.JLabel();
        floorField = new javax.swing.JTextField();
        postalCodeLabel = new javax.swing.JLabel();
        floorLabel = new javax.swing.JLabel();
        bellNameField = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        postalCodeField = new javax.swing.JFormattedTextField();
        menuPanel = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        CombinedPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        lastlNameLabel = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        firstNameLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        landLineLabel = new javax.swing.JLabel();
        mobileLabel = new javax.swing.JLabel();
        landLineField = new javax.swing.JFormattedTextField();
        mobileField = new javax.swing.JFormattedTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        noteField = new javax.swing.JTextArea();
        buttonsPanel = new javax.swing.JPanel();
        newCustomerEditCustomerPanel = new javax.swing.JPanel();
        newCustomerButton = new javax.swing.JButton();
        editCustomerButton = new javax.swing.JButton();
        saveCancelPanel = new javax.swing.JPanel();
        saveNewCustomerButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        customerIdField = new javax.swing.JTextField();
        measurementButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RootPanel.setBackground(new java.awt.Color(102, 255, 102));
        RootPanel.setPreferredSize(new java.awt.Dimension(1280, 1024));

        customerCardsTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        subTotalLabel.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        subTotalLabel.setText("ΜΕΡΙΚΟ ΣΥΝΟΛΟ:");

        subTotalSum.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        subTotalSum.setText("0.0");

        fpaLabel.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        fpaLabel.setText("ΦΠΑ:");

        fpaSum.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        fpaSum.setText("0.0");

        totalLabel.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        totalLabel.setText("ΤΕΛΙΚΟ ΣΥΝΟΛΟ:");

        totalSum.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        totalSum.setText("0.0");

        processButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        processButton.setText("PROCESS");

        javax.swing.GroupLayout calculationDisplayPanelLayout = new javax.swing.GroupLayout(calculationDisplayPanel);
        calculationDisplayPanel.setLayout(calculationDisplayPanelLayout);
        calculationDisplayPanelLayout.setHorizontalGroup(
            calculationDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculationDisplayPanelLayout.createSequentialGroup()
                .addComponent(subTotalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subTotalSum, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fpaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fpaSum)
                .addGap(58, 58, 58)
                .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalSum, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processButton, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
        );
        calculationDisplayPanelLayout.setVerticalGroup(
            calculationDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subTotalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subTotalSum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fpaSum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fpaLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(totalSum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(processButton, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
        );

        customerCardPanel.setBackground(new java.awt.Color(0, 255, 0));

        javax.swing.GroupLayout customerCardPanelLayout = new javax.swing.GroupLayout(customerCardPanel);
        customerCardPanel.setLayout(customerCardPanelLayout);
        customerCardPanelLayout.setHorizontalGroup(
            customerCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1263, Short.MAX_VALUE)
        );
        customerCardPanelLayout.setVerticalGroup(
            customerCardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 431, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout customerCardTabLayout = new javax.swing.GroupLayout(customerCardTab);
        customerCardTab.setLayout(customerCardTabLayout);
        customerCardTabLayout.setHorizontalGroup(
            customerCardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(calculationDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerCardTabLayout.createSequentialGroup()
                .addComponent(customerCardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        customerCardTabLayout.setVerticalGroup(
            customerCardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerCardTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calculationDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerCardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(658, 658, 658))
        );

        customerCardsTabbedPane.addTab("ΚΑΡΤΕΛΑ", customerCardTab);

        receivingDatePicker.setDateFormatString("dd/MM/yyyy");
        receivingDatePicker.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        try {
            receivingReportNumberField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        receivingReportNumberField.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        receivingReportNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                receivingReportNumberFieldKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("ΗΜΕΡΟΜΗΝΙΑ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("ΑΡΙΘΜΟΣ ΔΕΛΤΙΟΥ");

        addItemButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        addItemButton.setText("ΠΡΟΣΘΕΣΗ ΤΕΜΑΧΙΟΥ");
        addItemButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addItemButtonItemStateChanged(evt);
            }
        });
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });
        addItemButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addItemButtonKeyPressed(evt);
            }
        });

        saveReceivingReportButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        saveReceivingReportButton.setText("ΑΠΟΘΗΚΕΥΣΗ ΔΕΛΤΙΟΥ");
        saveReceivingReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveReceivingReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(receivingDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(receivingReportNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addItemButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveReceivingReportButton)
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(receivingReportNumberField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(receivingDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addItemButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveReceivingReportButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(1, 1, 1))))
        );

        receivingItemsPanel.setBackground(new java.awt.Color(153, 153, 255));
        receivingItemsPanel.setLayout(new javax.swing.BoxLayout(receivingItemsPanel, javax.swing.BoxLayout.LINE_AXIS));

        receivingItemsTable.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        receivingItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ΠΕΡΙΓΡΑΦΗ ΠΡΟΙΟΝΤΟΣ", "ΚΩΔΙΚΟΣ ΤΕΜΑΧΙΟΥ", "ΚΑΘΑΡΙΣΜΑ", "ΦΥΛΑΞΗ", "ΕΠΙΔΙΟΡΘΩΣΗ", "ΣΗΜΕΙΩΜΑ"
            }
        ));
        receivingItemsTable.setColumnSelectionAllowed(true);
        receivingItemsTable.setEnabled(false);
        receivingItemsTable.setRowHeight(36);
        jScrollPane2.setViewportView(receivingItemsTable);
        receivingItemsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (receivingItemsTable.getColumnModel().getColumnCount() > 0) {
            receivingItemsTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            receivingItemsTable.getColumnModel().getColumn(0).setMaxWidth(70);
            receivingItemsTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            receivingItemsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            receivingItemsTable.getColumnModel().getColumn(2).setMaxWidth(200);
            receivingItemsTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            receivingItemsTable.getColumnModel().getColumn(3).setMaxWidth(200);
            receivingItemsTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            receivingItemsTable.getColumnModel().getColumn(4).setMaxWidth(200);
            receivingItemsTable.getColumnModel().getColumn(5).setPreferredWidth(100);
            receivingItemsTable.getColumnModel().getColumn(5).setMaxWidth(200);
        }

        receivingItemsPanel.add(jScrollPane2);

        javax.swing.GroupLayout newReceivingTabLayout = new javax.swing.GroupLayout(newReceivingTab);
        newReceivingTab.setLayout(newReceivingTabLayout);
        newReceivingTabLayout.setHorizontalGroup(
            newReceivingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newReceivingTabLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
            .addComponent(receivingItemsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        newReceivingTabLayout.setVerticalGroup(
            newReceivingTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newReceivingTabLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receivingItemsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        customerCardsTabbedPane.addTab("ΝΕΑ ΠΑΡΑΛΑΒΗ", newReceivingTab);

        javax.swing.GroupLayout customerArchiveTabLayout = new javax.swing.GroupLayout(customerArchiveTab);
        customerArchiveTab.setLayout(customerArchiveTabLayout);
        customerArchiveTabLayout.setHorizontalGroup(
            customerArchiveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1275, Short.MAX_VALUE)
        );
        customerArchiveTabLayout.setVerticalGroup(
            customerArchiveTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 505, Short.MAX_VALUE)
        );

        customerCardsTabbedPane.addTab("ΑΡΧΕΙΟ", customerArchiveTab);

        HeadPanel.setPreferredSize(new java.awt.Dimension(1024, 413));

        AdressPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        alternativeStreetLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        alternativeStreetLabel.setText("ΟΔΟΣ");

        alternativeStreetField.setEditable(false);
        alternativeStreetField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        alternativeDistrictLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        alternativeDistrictLabel.setText("ΠΕΡΙΟΧΗ");

        alternativeDistrictField.setEditable(false);
        alternativeDistrictField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        alternativeBellNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        alternativeBellNameLabel.setText("ΟΝΟΜΑ ΣΤΟ ΚΟΥΔΟΥΝΟΙ");

        alternativeFloorField.setEditable(false);
        alternativeFloorField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        AlternativePostalCode_Label.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        AlternativePostalCode_Label.setText("Τ.Κ.");

        alternativeFloorLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        alternativeFloorLabel.setText("ΟΡΟΦΟΣ");

        alternativeBellNameField.setEditable(false);
        alternativeBellNameField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        alternativeAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        alternativeAddressLabel.setText("ΕΝΑΛΛΑΚΤΙΚΗ ΔΙΕΥΘΥΝΣΗ");

        alternativePostalCodeField.setEditable(false);
        try {
            alternativePostalCodeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        alternativePostalCodeField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        javax.swing.GroupLayout AdressPanel2Layout = new javax.swing.GroupLayout(AdressPanel2);
        AdressPanel2.setLayout(AdressPanel2Layout);
        AdressPanel2Layout.setHorizontalGroup(
            AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdressPanel2Layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(alternativeAddressLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdressPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AdressPanel2Layout.createSequentialGroup()
                        .addComponent(alternativeBellNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(alternativeBellNameField))
                    .addGroup(AdressPanel2Layout.createSequentialGroup()
                        .addComponent(alternativeStreetLabel)
                        .addGap(18, 18, 18)
                        .addComponent(alternativeStreetField))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AdressPanel2Layout.createSequentialGroup()
                        .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alternativeDistrictLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AlternativePostalCode_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AdressPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(alternativePostalCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(alternativeFloorLabel)
                                .addGap(18, 18, 18)
                                .addComponent(alternativeFloorField))
                            .addComponent(alternativeDistrictField)))))
        );
        AdressPanel2Layout.setVerticalGroup(
            AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdressPanel2Layout.createSequentialGroup()
                .addComponent(alternativeAddressLabel)
                .addGap(2, 2, 2)
                .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alternativeStreetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alternativeStreetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alternativeDistrictField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alternativeDistrictLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alternativePostalCodeField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(alternativeFloorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AlternativePostalCode_Label)
                        .addComponent(alternativeFloorLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AdressPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alternativeBellNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alternativeBellNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        AddressPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        streetLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        streetLabel.setText("ΟΔΟΣ");

        streetField.setEditable(false);
        streetField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        districtLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        districtLabel.setText("ΠΕΡΙΟΧΗ");

        districtField.setEditable(false);
        districtField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        bellNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        bellNameLabel.setText("ΟΝΟΜΑ ΣΤΟ ΚΟΥΔΟΥΝΟΙ");

        floorField.setEditable(false);
        floorField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        postalCodeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        postalCodeLabel.setText("Τ.Κ.");

        floorLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        floorLabel.setText("ΟΡΟΦΟΣ");

        bellNameField.setEditable(false);
        bellNameField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        addressLabel.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        addressLabel.setText("ΔΙΕΥΘΥΝΣΗ");

        postalCodeField.setEditable(false);
        try {
            postalCodeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        postalCodeField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        javax.swing.GroupLayout AddressPanel1Layout = new javax.swing.GroupLayout(AddressPanel1);
        AddressPanel1.setLayout(AddressPanel1Layout);
        AddressPanel1Layout.setHorizontalGroup(
            AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddressPanel1Layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(addressLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddressPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AddressPanel1Layout.createSequentialGroup()
                        .addComponent(bellNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(bellNameField))
                    .addGroup(AddressPanel1Layout.createSequentialGroup()
                        .addComponent(streetLabel)
                        .addGap(18, 18, 18)
                        .addComponent(streetField))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AddressPanel1Layout.createSequentialGroup()
                        .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(districtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postalCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(districtField)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AddressPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(postalCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(floorLabel)
                                .addGap(18, 18, 18)
                                .addComponent(floorField))))))
        );
        AddressPanel1Layout.setVerticalGroup(
            AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddressPanel1Layout.createSequentialGroup()
                .addComponent(addressLabel)
                .addGap(2, 2, 2)
                .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(streetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(streetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(districtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(districtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(floorLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(floorField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(postalCodeLabel)
                        .addComponent(postalCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddressPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bellNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bellNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        findButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        findButton.setText("ΒΡΕΣ ");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        CombinedPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        idLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        idLabel.setText("ID ΠΕΛΑΤΗ");

        lastlNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lastlNameLabel.setText("ΕΠΙΘΕΤΟ");

        lastNameField.setEditable(false);
        lastNameField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lastNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lastNameFieldKeyPressed(evt);
            }
        });

        firstNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        firstNameLabel.setText("ΟΝΟΜΑ");

        firstNameField.setEditable(false);
        firstNameField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        firstNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                firstNameFieldKeyPressed(evt);
            }
        });

        landLineLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        landLineLabel.setText("ΣΤΑΘΕΡΟ");

        mobileLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        mobileLabel.setText("ΚΙΝΗΤΟ");

        landLineField.setEditable(false);
        try {
            landLineField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("21########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        landLineField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        landLineField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                landLineFieldKeyPressed(evt);
            }
        });

        mobileField.setEditable(false);
        try {
            mobileField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("69########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        mobileField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        mobileField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mobileFieldKeyPressed(evt);
            }
        });

        noteField.setEditable(false);
        noteField.setColumns(20);
        noteField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        noteField.setLineWrap(true);
        noteField.setRows(5);
        jScrollPane3.setViewportView(noteField);

        buttonsPanel.setLayout(new java.awt.CardLayout());

        newCustomerButton.setBackground(new java.awt.Color(153, 153, 255));
        newCustomerButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        newCustomerButton.setText("<html><center>ΚΑΙΝΟΥΡΓΙΟΣ<br> ΠΕΛΑΤΗΣ</center></html>");
        newCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCustomerButtonActionPerformed(evt);
            }
        });
        newCustomerEditCustomerPanel.add(newCustomerButton);

        editCustomerButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editCustomerButton.setText("<html><center>ΔΙΟΡΘΩΣΗ<br>ΣΤΟΙΧΙΩΝ</center></html>");
        editCustomerButton.setEnabled(false);
        editCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCustomerButtonActionPerformed(evt);
            }
        });
        newCustomerEditCustomerPanel.add(editCustomerButton);

        buttonsPanel.add(newCustomerEditCustomerPanel, "card1");

        saveNewCustomerButton.setBackground(new java.awt.Color(0, 204, 51));
        saveNewCustomerButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        saveNewCustomerButton.setText("ΑΠΟΘΗΚΕΥΣΗ");
        saveNewCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewCustomerButtonActionPerformed(evt);
            }
        });
        saveCancelPanel.add(saveNewCustomerButton);

        cancelButton.setBackground(new java.awt.Color(255, 102, 102));
        cancelButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cancelButton.setText("ΑΚΥΡΩΣΗ");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        saveCancelPanel.add(cancelButton);

        buttonsPanel.add(saveCancelPanel, "card2");

        customerIdField.setEditable(false);
        customerIdField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        customerIdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerIdFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerIdFieldFocusLost(evt);
            }
        });
        customerIdField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerIdFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                customerIdFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout CombinedPanelLayout = new javax.swing.GroupLayout(CombinedPanel);
        CombinedPanel.setLayout(CombinedPanelLayout);
        CombinedPanelLayout.setHorizontalGroup(
            CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombinedPanelLayout.createSequentialGroup()
                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CombinedPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CombinedPanelLayout.createSequentialGroup()
                                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(landLineLabel)
                                    .addComponent(mobileLabel))
                                .addGap(24, 24, 24)
                                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(mobileField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(landLineField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(CombinedPanelLayout.createSequentialGroup()
                                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastlNameLabel)
                                    .addComponent(idLabel)
                                    .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CombinedPanelLayout.createSequentialGroup()
                                        .addComponent(customerIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(firstNameField)
                                    .addComponent(lastNameField)))))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        CombinedPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {firstNameLabel, idLabel, landLineLabel, lastlNameLabel, mobileLabel});

        CombinedPanelLayout.setVerticalGroup(
            CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombinedPanelLayout.createSequentialGroup()
                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CombinedPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(idLabel)
                        .addGap(16, 16, 16))
                    .addGroup(CombinedPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CombinedPanelLayout.createSequentialGroup()
                        .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CombinedPanelLayout.createSequentialGroup()
                        .addComponent(lastlNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(landLineLabel)
                    .addComponent(landLineField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CombinedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobileField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mobileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        CombinedPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {firstNameField, landLineField, lastNameField, mobileField});

        measurementButton.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        measurementButton.setText("ΚΑΤΑΜΕΤΡΗΣΗ");
        measurementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measurementButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CombinedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(measurementButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(measurementButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CombinedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout HeadPanelLayout = new javax.swing.GroupLayout(HeadPanel);
        HeadPanel.setLayout(HeadPanelLayout);
        HeadPanelLayout.setHorizontalGroup(
            HeadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeadPanelLayout.createSequentialGroup()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HeadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AdressPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddressPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        HeadPanelLayout.setVerticalGroup(
            HeadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeadPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(HeadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(menuPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, HeadPanelLayout.createSequentialGroup()
                        .addComponent(AddressPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AdressPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout RootPanelLayout = new javax.swing.GroupLayout(RootPanel);
        RootPanel.setLayout(RootPanelLayout);
        RootPanelLayout.setHorizontalGroup(
            RootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(customerCardsTabbedPane)
            .addComponent(HeadPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
        );
        RootPanelLayout.setVerticalGroup(
            RootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RootPanelLayout.createSequentialGroup()
                .addComponent(HeadPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(customerCardsTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(RootPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myInitialization() {
        customerController = new CustomerController();
        itemController = new ItemController();
        reportController = new ReportController();
        
        focusInColor = new Color(255, 255, 0);
        focusOutColor = new Color(240, 240, 240);
        
        Font headerFont = new Font("Tahoma", Font.BOLD, 14);
        receivingItemsTableHeader = receivingItemsTable.getTableHeader();
        receivingItemsTableHeader.setFont(headerFont);
        
        receivingItemsTableModel = (DefaultTableModel) receivingItemsTable.getModel();
        
        receivingDatePicker.setDate(new Date());
        receivingDatePickerTextField = (JTextField) receivingDatePicker.getComponent(1);
        receivingDatePickerTextField.setEditable(false);
    }

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        cleanFields();
        makeFieldsUneditable();
        makeSearchFieldsEditable();
        CardLayout card = (CardLayout) buttonsPanel.getLayout();
        card.show(buttonsPanel, "card1");

    }//GEN-LAST:event_findButtonActionPerformed

    private void customerIdFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerIdFieldKeyTyped
        //making sure that only + signed integers will be typed
        char c = evt.getKeyChar();
        String input = customerIdField.getText();
        if (!(Character.isDigit(c))
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE)
                || (input.length() == 5)) {
            evt.consume();
        }
    }//GEN-LAST:event_customerIdFieldKeyTyped

    private void customerIdFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerIdFieldKeyPressed
        
        if (customerIdField.isEditable() && evt.getKeyCode() == 10 && customerIdInputValid()) {
            int id = Integer.parseInt(customerIdField.getText());
            dispalyCustomerById(id);
            fillTables();
            
        }
    }//GEN-LAST:event_customerIdFieldKeyPressed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        saveAndCancelButtonsActions();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveNewCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveNewCustomerButtonActionPerformed
        //no need to check if input is valid, it is ,because here id comes from database
        if (customerInputsValid()) {
            Customer customer = collectCustomerInformation();
            if (customerIdField.getText().equals("")) {// checks if customer is new (equals("")

                customerController.saveNewCustomer(customer);
            } else { //or is to be edited 

                customer.setId(Integer.parseInt(customerIdField.getText().trim()));//i guess, no need for trim(), but, just in case
                customerController.editCustomer(customer);
            }
            
            saveAndCancelButtonsActions();
        }
    }//GEN-LAST:event_saveNewCustomerButtonActionPerformed
    
    private void saveAndCancelButtonsActions() {
        makeSearchFieldsUneditable();
        makeFieldsUneditable();
        editCustomerButton.setEnabled(false);
        cleanFields();
        CardLayout card = (CardLayout) buttonsPanel.getLayout();
        card.show(buttonsPanel, "card1");
    }

    private void newCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCustomerButtonActionPerformed
        cleanFields();
        makeSearchFieldsEditable();
        makeFieldsEditable();
        customerIdField.setEditable(false);
        
        CardLayout card = (CardLayout) buttonsPanel.getLayout();
        card.show(buttonsPanel, "card2");
    }//GEN-LAST:event_newCustomerButtonActionPerformed

    private void mobileFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileFieldKeyPressed
        if (mobileField.isEditable() && evt.getKeyCode() == 10) {
            String mobile = mobileField.getText().trim();
            
            ArrayList<Customer> customers = customerController.getCustomerByMobileNumber(mobile);
            SearchFrame searchFrame = new SearchFrame(this, customers);
            searchFrame.setVisible(true);
            
        }
    }//GEN-LAST:event_mobileFieldKeyPressed

    private void landLineFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_landLineFieldKeyPressed
        if (landLineField.isEditable() && evt.getKeyCode() == 10) {
            String landLine = landLineField.getText().trim();
            
            ArrayList<Customer> customers = customerController.getCustomerByLandLineNumber(landLine);
            SearchFrame searchFrame = new SearchFrame(this, customers);
            searchFrame.setVisible(true);
            
        }
    }//GEN-LAST:event_landLineFieldKeyPressed

    private void firstNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstNameFieldKeyPressed

    }//GEN-LAST:event_firstNameFieldKeyPressed

    private void lastNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lastNameFieldKeyPressed
        if (lastNameField.isEditable() && evt.getKeyCode() == 10) {
            String lastName = lastNameField.getText().trim();
            
            ArrayList<Customer> customers = customerController.getCustomerByLastName(lastName);
            SearchFrame searchFrame = new SearchFrame(this, customers);
            searchFrame.setVisible(true);
            
        }
    }//GEN-LAST:event_lastNameFieldKeyPressed

    private void editCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCustomerButtonActionPerformed
        
        makeSearchFieldsEditable();
        makeFieldsEditable();
        customerIdField.setEditable(false);
        
        CardLayout card = (CardLayout) buttonsPanel.getLayout();
        card.show(buttonsPanel, "card2");
    }//GEN-LAST:event_editCustomerButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        ReceivingItemFrame itemFrame = new ReceivingItemFrame(this);
        itemFrame.setVisible(true);
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void addItemButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addItemButtonItemStateChanged

    }//GEN-LAST:event_addItemButtonItemStateChanged

    private void addItemButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addItemButtonKeyPressed
        if (evt.getKeyCode() == 10) {
            addItemButton.doClick();
        }
    }//GEN-LAST:event_addItemButtonKeyPressed

    private void receivingReportNumberFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_receivingReportNumberFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            addItemButton.doClick();
        }
    }//GEN-LAST:event_receivingReportNumberFieldKeyPressed

    private void saveReceivingReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReceivingReportButtonActionPerformed
        
        if (reportGoodToGo()) {
            Report report = collectReceivingReportInformation();
            reportController.saveReport(report);
            cleanReceivingReport();
            
        }
        

    }//GEN-LAST:event_saveReceivingReportButtonActionPerformed

    private void customerIdFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerIdFieldFocusGained

    }//GEN-LAST:event_customerIdFieldFocusGained

    private void customerIdFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerIdFieldFocusLost
        customerIdField.setBackground(focusOutColor);
        System.out.println("neewd to do some work here to -customerIdFieldFocusLost, MainFrame");
    }//GEN-LAST:event_customerIdFieldFocusLost

    private void measurementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_measurementButtonActionPerformed
        MeasurementFrame measurementFrame = new MeasurementFrame();
        measurementFrame.setVisible(true);
    }//GEN-LAST:event_measurementButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("System".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddressPanel1;
    private javax.swing.JPanel AdressPanel2;
    private javax.swing.JLabel AlternativePostalCode_Label;
    private javax.swing.JPanel CombinedPanel;
    private javax.swing.JPanel HeadPanel;
    private javax.swing.JPanel RootPanel;
    private javax.swing.JButton addItemButton;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel alternativeAddressLabel;
    private javax.swing.JTextField alternativeBellNameField;
    private javax.swing.JLabel alternativeBellNameLabel;
    private javax.swing.JTextField alternativeDistrictField;
    private javax.swing.JLabel alternativeDistrictLabel;
    private javax.swing.JTextField alternativeFloorField;
    private javax.swing.JLabel alternativeFloorLabel;
    private javax.swing.JFormattedTextField alternativePostalCodeField;
    private javax.swing.JTextField alternativeStreetField;
    private javax.swing.JLabel alternativeStreetLabel;
    private javax.swing.JTextField bellNameField;
    private javax.swing.JLabel bellNameLabel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel calculationDisplayPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel customerArchiveTab;
    private javax.swing.JPanel customerCardPanel;
    private javax.swing.JPanel customerCardTab;
    private javax.swing.JTabbedPane customerCardsTabbedPane;
    private javax.swing.JTextField customerIdField;
    private javax.swing.JTextField districtField;
    private javax.swing.JLabel districtLabel;
    private javax.swing.JButton editCustomerButton;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField floorField;
    private javax.swing.JLabel floorLabel;
    private javax.swing.JLabel fpaLabel;
    private javax.swing.JLabel fpaSum;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JFormattedTextField landLineField;
    private javax.swing.JLabel landLineLabel;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastlNameLabel;
    private javax.swing.JButton measurementButton;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JFormattedTextField mobileField;
    private javax.swing.JLabel mobileLabel;
    private javax.swing.JButton newCustomerButton;
    private javax.swing.JPanel newCustomerEditCustomerPanel;
    private javax.swing.JPanel newReceivingTab;
    private javax.swing.JTextArea noteField;
    private javax.swing.JFormattedTextField postalCodeField;
    private javax.swing.JLabel postalCodeLabel;
    private javax.swing.JButton processButton;
    private com.toedter.calendar.JDateChooser receivingDatePicker;
    private javax.swing.JPanel receivingItemsPanel;
    private javax.swing.JTable receivingItemsTable;
    private javax.swing.JFormattedTextField receivingReportNumberField;
    private javax.swing.JPanel saveCancelPanel;
    private javax.swing.JButton saveNewCustomerButton;
    private javax.swing.JButton saveReceivingReportButton;
    private javax.swing.JTextField streetField;
    private javax.swing.JLabel streetLabel;
    private javax.swing.JLabel subTotalLabel;
    private javax.swing.JLabel subTotalSum;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel totalSum;
    // End of variables declaration//GEN-END:variables

    private void makeFieldsEditable() {
        
        firstNameField.setEditable(true);
        
        noteField.setEditable(true);
        streetField.setEditable(true);
        districtField.setEditable(true);
        postalCodeField.setEditable(true);
        floorField.setEditable(true);
        bellNameField.setEditable(true);
        
        alternativeStreetField.setEditable(true);
        alternativeDistrictField.setEditable(true);
        alternativePostalCodeField.setEditable(true);
        alternativeFloorField.setEditable(true);
        alternativeBellNameField.setEditable(true);
        
    }
    
    private void makeFieldsUneditable() {
        
        firstNameField.setEditable(false);
        
        noteField.setEditable(false);
        streetField.setEditable(false);
        districtField.setEditable(false);
        postalCodeField.setEditable(false);
        floorField.setEditable(false);
        bellNameField.setEditable(false);
        
        alternativeStreetField.setEditable(false);
        alternativeDistrictField.setEditable(false);
        alternativePostalCodeField.setEditable(false);
        alternativeFloorField.setEditable(false);
        alternativeBellNameField.setEditable(false);
    }
    
    public void dispalyCustomerById(int id) {
        
        if (customerController.checkCustomerById(id)) {
            Customer customer = customerController.getCustomerById(id);
            makeSearchFieldsUneditable();
            displayCustomer(customer);
            editCustomerButton.setEnabled(true);
        } else {
            
        }
    }
    
    private void displayCustomer(Customer customer) {
        customerIdField.setText(Integer.toString(customer.getId()));
        lastNameField.setText(customer.getLastName());
        firstNameField.setText(customer.getFirstName());
        landLineField.setText(customer.getLandlinePhone());
        mobileField.setText(customer.getMobilePhone());
        noteField.setText(customer.getNote());
        streetField.setText(customer.getStreet());
        districtField.setText(customer.getDistrict());
        floorField.setText(customer.getFloor());
        postalCodeField.setText(customer.getPostalCode());
        bellNameField.setText(customer.getBellName());
        alternativeStreetField.setText(customer.getAlternativeStreet());
        alternativeDistrictField.setText(customer.getAlternativeDistrict());
        alternativePostalCodeField.setText(customer.getAlternativePostalCode());
        alternativeFloorField.setText(customer.getAlternativeFloor());
        alternativeBellNameField.setText(customer.getAlternativeBellName());
    }
    
    private void makeSearchFieldsEditable() {
        customerIdField.setEditable(true);
        lastNameField.setEditable(true);
        landLineField.setEditable(true);
        mobileField.setEditable(true);
    }
    
    private void makeSearchFieldsUneditable() {
        customerIdField.setEditable(false);
        lastNameField.setEditable(false);
        landLineField.setEditable(false);
        mobileField.setEditable(false);
    }
    
    private void cleanFields() {
        customerIdField.setText("");
        
        lastNameField.setText("");
        firstNameField.setText("");
        landLineField.setText("");
        mobileField.setText("");
        
        noteField.setText("");
        
        streetField.setText("");
        districtField.setText("");
        postalCodeField.setText("");
        floorField.setText("");
        bellNameField.setText("");
        
        alternativeStreetField.setText("");
        alternativeDistrictField.setText("");
        alternativePostalCodeField.setText("");
        alternativeFloorField.setText("");
        alternativeBellNameField.setText("");
    }
    
    private boolean customerIdInputValid() {
        boolean valid = true;
        customerIdField.setText(customerIdField.getText().trim());
        
        if (customerIdField.getText().equals("")) {
            JOptionPane.showMessageDialog(new javax.swing.JFrame(),
                    "ΠΕΔΙΟ 'ID ΠΕΛΑΤΗ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΙΝΑΙ ΑΔΙΟ.",
                    "ΛΑΘΟΣ ΚΩΔΙΚΟΣ ΠΕΛΑΤΗ",
                    JOptionPane.ERROR_MESSAGE);
            customerIdField.setBackground(Color.red);
            valid = false;
        }
        char[] characters = customerIdField.getText().toCharArray();
        for (char c : characters) {
            if (!(Character.isDigit(c))) {//in case of copy paste with wrong characters
                valid = false;
                JOptionPane.showMessageDialog(new javax.swing.JFrame(),
                        "ΣΤΟ ΠΕΔΙΟ 'ID ΠΕΛΑΤΗ' ΕΠΙΤΡΕΠΟΝΤΑΙ ΜΟΝΟ ΑΡΙΜΟΙ",
                        "ΛΑΘΟΣ ΚΩΔΙΚΟΣ ΠΕΛΑΤΗ ",
                        JOptionPane.ERROR_MESSAGE);
                customerIdField.setBackground(Color.red);
                break;
            }
            
        }
        
        return valid;
    }
    
    private boolean customerInputsValid() {
        boolean valid = true;
        if (!lastNameInputValid() || !firstNameInputeValid() || !noteInputValid()
                || !streetInputValid()
                || !districtInputValid() || !postalCodeInputValid()
                || !floorInputValid() || !bellNameInputValid()
                || !alternativeStreetInputValid() || !alternativeDistrictInputValid()
                || !alternativePostalCodeInputValid() || !alternativeFloorInputValid()
                || !alternativeBellNameInputValid()) {
            valid = false;
        }
        
        return valid;
    }
    
    private Customer collectCustomerInformation() {
        Customer customer = new Customer();
        customer.setLastName(lastNameField.getText().trim());
        customer.setFirstName(firstNameField.getText().trim());
        customer.setLandlinePhone(landLineField.getText());
        customer.setMobilePhone(mobileField.getText());
        customer.setNote(noteField.getText().trim());
        customer.setStreet(streetField.getText().trim());
        customer.setDistrict(districtField.getText().trim());
        customer.setPostalCode(postalCodeField.getText());
        customer.setFloor(floorField.getText());
        customer.setBellName(bellNameField.getText().trim());
        customer.setAlternativeStreet(alternativeStreetField.getText().trim());
        customer.setAlternativeDistrict(alternativeDistrictField.getText().trim());
        customer.setAlternativePostalCode(alternativePostalCodeField.getText());
        customer.setAlternativeFloor(alternativeFloorField.getText());
        customer.setAlternativeBellName(alternativeBellNameField.getText().trim());
        return customer;
    }
    
    private boolean lastNameInputValid() {
        boolean valid = true;
        String lastName = lastNameField.getText().trim();
        if (lastName.equals("")) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΕΠΙΘΕΤΟ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΙΝΑΙ ΑΔΕΙΟ",
                    "ΕΠΙΘΕΤΟ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        if (lastName.length() > 45) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΕΠΙΘΕΤΟ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 45 ΓΡΑΜΜΑΤΑ",
                    "ΕΠΙΘΕΤΟ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
        
    }
    
    private boolean firstNameInputeValid() {
        boolean valid = true;
        String firstName = firstNameField.getText().trim();
        
        if (firstName.length() > 45) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΟΝΟΜΑ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 45 ΓΡΑΜΜΑΤΑ",
                    "ΟΝΟΜΑ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean noteInputValid() {
        boolean valid = true;
        String note = noteField.getText().trim();
        
        if (note.length() > 250) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΣΗΜΕΙΩΜΑ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 250 ΓΡΑΜΜΑΤΑ",
                    "ΣΗΜΕΙΩΜΑ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean streetInputValid() {
        boolean valid = true;
        String street = streetField.getText().trim();
        
        if (street.length() > 60) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΟΔΟΣ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 60 ΓΡΑΜΜΑΤΑ",
                    "ΟΔΟΣ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean districtInputValid() {
        boolean valid = true;
        String district = districtField.getText().trim();
        
        if (district.length() > 60) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΠΕΡΙΟΧΗ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 30 ΓΡΑΜΜΑΤΑ",
                    "ΠΕΡΙΟΧΗ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
        
    }
    
    private boolean postalCodeInputValid() {
        boolean valid = true;
        String postalCode = postalCodeField.getText().trim();
        System.out.println("need to change for real postal codes ");
        if (postalCode.length() > 6) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΛΑΘΟΣ ΤΑΧΙΔΡΟΜΙΚΟΣ ΚΩΔΙΚΟΣ",
                    "ΤΑΧΙΔΡΟΜΙΚΟΣ ΚΩΔΙΚΟΣ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean floorInputValid() {
        boolean valid = true;
        System.out.println("need to change field for combobox with floors -10 to 100 with δομα and υπογειο ");
        String floor = floorField.getText().trim();
        if (floor.length() > 10) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΟΡΟΦΟΣ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 10 ΓΡΑΜΜΑΤΑ",
                    "ΟΡΟΦΟΣ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean bellNameInputValid() {
        boolean valid = true;
        String bellName = bellNameField.getText().trim();
        
        if (bellName.length() > 60) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΟΝΟΜΑ ΣΤΟ ΚΟΥΔΟΥΝΙ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 60 ΓΡΑΜΜΑΤΑ",
                    "ΟΝΟΜΑ ΣΤΟ ΚΟΥΔΟΥΝΙ",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean alternativeStreetInputValid() {
        boolean valid = true;
        String street = streetField.getText().trim();
        
        if (street.length() > 60) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΟΔΟΣ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 60 ΓΡΑΜΜΑΤΑ",
                    "ΟΔΟΣ(ΕΝΑΛΛΑΚΤΙΚΗ ΔΙΕΥΘΥΝΣΗ)",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean alternativeDistrictInputValid() {
        boolean valid = true;
        String alternativeDistrict = alternativeDistrictField.getText().trim();
        
        if (alternativeDistrict.length() > 60) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΠΕΡΙΟΧΗ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 30 ΓΡΑΜΜΑΤΑ",
                    "ΠΕΡΙΟΧΗ(ΕΝΑΛΛΑΚΤΙΚΗ ΔΙΕΥΘΥΝΣΗ)",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean alternativePostalCodeInputValid() {
        boolean valid = true;
        String alternativePostalCode = alternativePostalCodeField.getText().trim();
        System.out.println("need to change for real postal codes ");
        if (alternativePostalCode.length() > 6) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΛΑΘΟΣ ΤΑΧΙΔΡΟΜΙΚΟΣ ΚΩΔΙΚΟΣ",
                    "ΤΑΧΙΔΡΟΜΙΚΟΣ ΚΩΔΙΚΟΣ (ΕΝΑΛΛΑΚΤΙΚΗ ΔΙΕΥΘΥΝΣΗ)",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean alternativeFloorInputValid() {
        boolean valid = true;
        System.out.println("need to change field for combobox with floors -10 to 100 with δομα and υπογειο ");
        String alternativeFloor = alternativeFloorField.getText().trim();
        if (alternativeFloor.length() > 10) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΟΡΟΦΟΣ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 10 ΓΡΑΜΜΑΤΑ",
                    "ΟΡΟΦΟΣ(ΕΝΑΛΛΑΚΤΙΚΗ ΔΙΕΥΘΥΝΣΗ)",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    private boolean alternativeBellNameInputValid() {
        boolean valid = true;
        String alternativeBellName = alternativeBellNameField.getText().trim();
        
        if (alternativeBellName.length() > 60) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "ΠΕΔΙΟ 'ΟΝΟΜΑ ΣΤΟ ΚΟΥΔΟΥΝΙ' ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΧΕΙ ΠΑΝΩ ΑΠΟ 60 ΓΡΑΜΜΑΤΑ",
                    "ΟΝΟΜΑ ΣΤΟ ΚΟΥΔΟΥΝΙ(ΕΝΑΛΛΑΚΤΙΚΗ ΔΙΕΥΘΥΝΣΗ)",
                    JOptionPane.ERROR_MESSAGE);
            valid = false;
        }
        return valid;
    }
    
    public void fillTables() {
        fillCardTable();
        /*
System.out.println("maybe to drop switch, and fille all the table simultaniously, don know yet");

        String tabName = customerCardsTabbedPane.getTitleAt(customerCardsTabbedPane.getSelectedIndex());
        switch (tabName) {
            case "ΚΑΡΤΕΛΑ":
                fillCardTable();
                break;
            case "ΝΕΑ ΠΑΡΑΛΑΒΗ":
                System.out.println("nneed to write code here for new receiving");
                break;
            case "ΑΡΧΕΙΟ":
                System.out.println("need to write code here for archive");
                break;
        }
         */
    }
    
    private void fillCardTable() {
        customerCardPanel.removeAll();
        MyTableModel model = new MyTableModel();
        
        Object[] columns = new Object[19];
        
        columns[0] = "ΚΩΔΙΚΟΣ ΠΡΟΙΟΝΤΟΣ";
        columns[1] = "ΠΕΡΙΓΡΑΦΗ";
        columns[2] = "ΚΩΔΙΚΟΣ ΤΕΜΑΧΙΟΥ";
        columns[3] = "ΧΡΟΝΙΑ";
        columns[4] = "ΚΑΘΑΡΙΣΜΑ";
        columns[5] = "ΦΥΛΑΞΗ";
        columns[6] = "ΕΠΙΔΙΟΘΡΩΣΗ";
        columns[7] = "ΣΗΜΕΙΩΜΑ";
        
        columns[8] = "ΤΙΜΗ ΓΙΑ ΚΑΘΑΡΙΣΜΑ";
        columns[9] = "ΤΙΜΗ ΓΙΑ ΦΥΛΑΞΗ";
        
        columns[10] = "ΜΗΚΟΣ";
        columns[11] = "ΠΛΑΟΤΟΣ";
        columns[12] = "ΤΕΤΡΑΓΩΝΙΚΑ";
        
        columns[13] = "ΧΡΕΩΣΗ ΓΙΑ ΚΑΘΑΡΙΣΜΑ";
        columns[14] = "ΧΡΕΩΣΗ ΓΙΑ ΦΥΛΑΞΗ";
        columns[15] = "ΧΡΕΩΣΗ ΓΙΑ ΕΠΙΔΙΟΡΘΩΣΗ";
        
        columns[16] = "ΣΥΝΟΛΟ ΧΡΕΩΣΗΣ ΤΕΜΑΧΙΟΥ";
        columns[17] = "ΚΑΤΑΣΤΑΣΗ";
        columns[18] = "ΔΙΑΛΟΓΗ";
        model.setColumnIdentifiers(columns);
        
        ArrayList<Item> items = itemController.getCustomerItems(Integer.parseInt(customerIdField.getText()));
        
        for (Item item : items) {
            Object[] row = new Object[19];
            
            row[0] = item.getId();
            row[1] = item.getDescription();
            row[2] = item.getCode();
            row[3] = item.getYear();
            if (item.isForCleaning()) {
                row[4] = "*";
            } else {
                row[4] = "-";
            }
            if (item.isForStoring()) {
                row[5] = "*";
            } else {
                row[5] = "-";
            }
            if (item.isForMending()) {
                row[6] = "*";
            } else {
                row[6] = "-";
            }
            
            row[7] = item.getNote();
            
            row[8] = item.getCleaningPrice();
            row[9] = item.getStoringPrice();
            
            if (item.getLength() != null) {
                BigDecimal length, width, square;
                row[10] = length = item.getLength();
                row[11] = width = item.getWidth();
                square = length.multiply(width);
                row[12] = square.setScale(2, RoundingMode.HALF_EVEN);
            } else {
                row[10] = "N/A";
                row[11] = "N/A";
                row[12] = "N/A";
            }
            BigDecimal cleaningCharge, storingCharge, mendingCharge, s, totalCharge;
            row[13] = cleaningCharge = item.getCleaningCharge();
            row[14] = storingCharge = item.getStoringCharge();
            row[15] = mendingCharge = item.getMendingCharge();
            totalCharge = storingCharge.add(cleaningCharge);
            row[16] = totalCharge;
            row[17] = item.getStatus();
            boolean status;
            if (item.getStatus().equals("ready")) {
                row[18] = status = Boolean.TRUE;
            } else {
                row[18] = status = Boolean.FALSE;
            }
            
            model.addRow(row, status);
        }
        JScrollPane sc = (JScrollPane) createTable(model);
        
        customerCardPanel.add(sc);
        customerCardPanel.setLayout(new BoxLayout(customerCardPanel, BoxLayout.LINE_AXIS));
        pack();
        countTotal(model);
    }
    
    private JComponent createTable(DefaultTableModel model) {
//do not ask much about this, i don know how it works
        JTable table = new JTable(model) {
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);

                //  Color row based on a cell value
                if (!isRowSelected(row)) {
                    c.setBackground(getBackground());
                    int modelRow = convertRowIndexToModel(row);
                    String status = (String) getModel().getValueAt(modelRow, 17);
                    boolean ready = (boolean) getModel().getValueAt(modelRow, 18);
                    
                    if (!"ready".equals(status)) {
                        //model.setValueAt(false, modelRow, 17);
                        c.setBackground(Color.RED);
                    }
                    
                    if (ready) {
                        c.setBackground(Color.GREEN);
                    }
                    
                }
                
                if (isRowSelected(row)) {
                    //   c.setBackground(getBackground());
                    int modelRow = convertRowIndexToModel(row);
                    String status = (String) getModel().getValueAt(modelRow, 17);
                    if (!"ready".equals(status)) {
                        // model.setValueAt(false, modelRow, 17);
                        c.setBackground(Color.PINK);
                        
                    }
                    
                }
                
                return c;
            }
        };
        
        table.getModel().addTableModelListener(
                new TableModelListener() {
            
            public void tableChanged(TableModelEvent evt) {
                countTotal((DefaultTableModel) table.getModel());
            }
        }
        );
        
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        table.setRowHeight(36);
        
        table.setFont(new java.awt.Font("Tahoma", 0, 30));
        
        table.changeSelection(0, 0, false, false);
        table.setAutoCreateRowSorter(true);
        // table.setAutoResizeMode(AUTO_RESIZE_OFF);
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setViewportView(table);
        int scrollPaneHeigth = (model.getRowCount() + 2) * table.getRowHeight();
        scrollPane.setPreferredSize(new Dimension(scrollPane.getPreferredSize().width, scrollPaneHeigth));
        return scrollPane;
    }
    
    private void countTotal(DefaultTableModel model) {
        
        int rowCount = model.getRowCount();
        BigDecimal subTotal = BigDecimal.ZERO;
        
        for (int x = 0; x < rowCount; x++) {
            if (!Boolean.valueOf(model.getValueAt(x, 18).toString())) {
                continue;
            }
            //summing up of item`s total charges
            subTotal = subTotal.add(new BigDecimal(model.getValueAt(x, 16).toString()));
            subTotal = subTotal.setScale(2, RoundingMode.HALF_EVEN);
        }
        subTotalSum.setText(subTotal.toString());
        
        BigDecimal fpa = subTotal.multiply(new BigDecimal(24).divide(new BigDecimal(100)));
        fpa = fpa.setScale(2, RoundingMode.HALF_EVEN);
        fpaSum.setText(fpa.toString());
        
        BigDecimal total = subTotal.add(fpa);
        total.setScale(2, RoundingMode.HALF_EVEN);
        totalSum.setText(total.toString());
        
    }
    
    public void addItemToReceivingItemsTable(Item item) {
        String[] row = new String[7];
        row[0] = String.valueOf(item.getId());
        row[1] = item.getDescription();
        row[2] = String.valueOf(item.getCode());
        if (item.isForCleaning()) {
            row[3] = "*";
        } else {
            row[3] = "-";
        }
        if (item.isForStoring()) {
            row[4] = "*";
        } else {
            row[4] = "-";
        }
        if (item.isForMending()) {
            row[5] = "*";
        } else {
            row[5] = "-";
        }
        row[6] = item.getNote();
        
        receivingItemsTableModel.addRow(row);
    }
    
    private Report collectReceivingReportInformation() {
        
        Report report = new Report();
        report.setType(Report.Type.RECEIVING);
        report.getCustomer().setId(Integer.parseInt(customerIdField.getText().toString()));
        report.setDate(receivingDatePicker.getDate());
        report.setNumber(Integer.parseInt(receivingReportNumberField.getText()));
        DefaultTableModel model = (DefaultTableModel) receivingItemsTable.getModel();
        
        for (int x = 0; x < model.getRowCount(); x++) {
            Item item = new Item();
            item.setId(Integer.parseInt(model.getValueAt(x, 0).toString()));
            item.setCode(Integer.parseInt(model.getValueAt(x, 2).toString()));
            if (model.getValueAt(x, 3).equals("*")) {
                item.setForCleaning(true);
            } else {
                item.setForCleaning(false);
            }
            if (model.getValueAt(x, 4).equals("*")) {
                item.setForStoring(true);
            } else {
                item.setForStoring(false);
            }
            if (model.getValueAt(x, 5).equals("*")) {
                item.setForMending(true);
            } else {
                item.setForMending(false);
            }
            item.setNote(model.getValueAt(x, 6).toString());
            report.getItems().add(item);
        }
        
        return report;
    }
    
    private boolean reportGoodToGo() {
        if (customerIdInputValid() && receivingReportNumberGoodToGo() && receivingReportTableGoodToGo()) {
            int customerId = Integer.parseInt(customerIdField.getText());
            if (customerController.checkCustomerById(customerId)) {
                return true;
            } else {
                return false;
            }
            
        } else {
            return false;
        }
        
    }
    
    private boolean receivingReportNumberGoodToGo() {
        if (receivingReportNumberField.getText().trim().length() > 0) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "ΠΕΔΙΟ 'ΑΡΙΘΜΟΣ ΔΕΛΤΙΟΥ ΔΕΝ ΜΠΟΡΕΙ ΝΑ ΕΙΝΑΙ ΑΔΙΟ",
                    "ΛΑΘΟΣ ΑΡΙΘΜΟΣ ΔΕΛΤΙΟΥ",
                    JOptionPane.ERROR_MESSAGE);
            receivingReportNumberField.setBackground(Color.red);
            receivingReportNumberField.requestFocus();
            return false;
        }
        
    }
    
    private boolean receivingReportTableGoodToGo() {
        if (receivingItemsTable.getModel().getRowCount() > 0) {
            
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "ΠΡΕΠΕΙ ΝΑ ΥΠΑΡΧΕΙ ΤΟΥΛΑΧΙΣΤΟΝ ΕΝΑ ΤΕΜΑΧΙΟ ΣΤΟ ΔΕΛΤΙΟ ΠΑΡΑΛΑΒΗΣ",
                    "ΛΑΘΟΣ ΤΕΜΑΧΙΑ",
                    JOptionPane.ERROR_MESSAGE);
            receivingReportNumberField.setBackground(Color.red);
            receivingReportNumberField.requestFocus();
            return false;
        }
    }
    
    private void cleanReceivingReport() {
        receivingReportNumberField.setText("");
        receivingItemsTableModel.setRowCount(0);
        cleanFields();
    }
    
}
